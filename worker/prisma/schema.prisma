// add to the sql file
//
// DROP TABLE IF EXISTS Inbox;
// DROP TABLE IF EXISTS Blog;
// DROP TABLE IF EXISTS Workspace;
// DROP TABLE IF EXISTS User;
// DROP TABLE IF EXISTS Tag;

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "relationJoins"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  tgUserId          String              @unique
  tgChatId          String              @unique
  lang              String
  name              String
  cfg               String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Workspace         Workspace[]
  GuestsByWorkspace GuestsByWorkspace[]
  Inbox             Inbox[]
  Post              Post[]
  Blog              Blog[]
  SocialMedia       SocialMedia[]
}

model Workspace {
  id                Int                 @id @default(autoincrement())
  name              String
  cfg               String
  orderNum          Int?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  byUser            User                @relation(fields: [byUserId], references: [id])
  byUserId          Int
  GuestsByWorkspace GuestsByWorkspace[]
  Blog              Blog[]
  Inbox             Inbox[]
}

model GuestsByWorkspace {
  id          Int       @id @default(autoincrement())
  cfg         String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int
}

model Blog {
  id          Int           @id @default(autoincrement())
  name        String
  cfg         String
  orderNum    Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId Int
  byUser      User          @relation(fields: [byUserId], references: [id])
  byUserId    Int
  SocialMedia SocialMedia[]
  Tag         Tag[]
}

model SocialMedia {
  id        Int      @id @default(autoincrement())
  // e.g telegram, dzen, etc
  type      String
  // optional name in case if there several similar social media
  name      String?
  cfg       String
  orderNum  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    Int
  byUser    User     @relation(fields: [byUserId], references: [id])
  byUserId  Int
  Tag       Tag[]
  Post      Post[]
}

model Tag {
  id            Int         @id @default(autoincrement())
  name          String
  blog          Blog        @relation(fields: [blogId], references: [id])
  blogId        Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  socialMedia   SocialMedia @relation(fields: [socialMediaId], references: [id])
  socialMediaId Int
}

model Inbox {
  id          Int       @id @default(autoincrement())
  name        String?
  payloadJson String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  byUser      User      @relation(fields: [byUserId], references: [id])
  byUserId    Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int
  // media
}

model Post {
  id                     Int     @id @default(autoincrement())
  name                   String
  // timestamp minutes of publicated moment
  pubTimestampMinutes    Int?
  // data of publicated post, depends on certain social media
  publicatedDataJson     String
  payloadJson            String?
  // createdByUser       User     @relation("ScheduledCreatedByUser", fields: [createdByUserId], references: [id])
  updatedByUserId        Int?
  forcePublishedByUserId Int?
  changedTimeByUserId    Int?

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  createdByUser   User        @relation(fields: [createdByUserId], references: [id])
  createdByUserId Int
  socialMedia     SocialMedia @relation(fields: [socialMediaId], references: [id])
  socialMediaId   Int
}
