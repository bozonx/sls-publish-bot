// add to the sql file
//
// DROP TABLE IF EXISTS Inbox;
// DROP TABLE IF EXISTS Blog;
// DROP TABLE IF EXISTS Workspace;
// DROP TABLE IF EXISTS User;
// DROP TABLE IF EXISTS Tag;

generator client {
  provider        = "prisma-client-js"
  // , "relationJoins"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  tgUserId  String   @unique
  tgChatId  String   @unique
  lang      String
  name      String
  cfg       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Permission        Permission[]
  Workspace         Workspace[]
  GuestsByWorkspace GuestsByWorkspace[]
  ChangeLog         ChangeLog[]
}

model Permission {
  id            Int          @id @default(autoincrement())
  name          String?
  descr         String?
  payload       String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  // which user give a permission
  // fromUser          User         @relation(fields: [fromUserId], references: [id])
  // fromUserId        Int
  // which user has given a permission
  toUser        User         @relation(fields: [toUserId], references: [id])
  toUserId      Int
  // permissions only for specific blog
  blog          Blog?        @relation(fields: [blogId], references: [id])
  blogId        Int?
  // permissions only for specific sm
  socialMedia   SocialMedia? @relation(fields: [socialMediaId], references: [id])
  socialMediaId Int?
}

model Workspace {
  id                Int                 @id @default(autoincrement())
  name              String
  descr             String?
  cfg               String
  orderNum          Int?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  byUser            User                @relation(fields: [byUserId], references: [id])
  byUserId          Int
  GuestsByWorkspace GuestsByWorkspace[]
  Blog              Blog[]
}

model GuestsByWorkspace {
  id          Int       @id @default(autoincrement())
  cfg         String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int
}

model Blog {
  id          Int           @id @default(autoincrement())
  name        String
  descr       String?
  cfg         String
  // list of tags of blog separated by ","
  tags        String?
  orderNum    Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId Int
  Permission  Permission[]
  SocialMedia SocialMedia[]
  Task        Task[]
}

model SocialMedia {
  id         Int          @id @default(autoincrement())
  // e.g telegram, dzen, etc
  type       String
  // optional name in case if there several similar social media
  name       String?
  descr      String?
  cfg        String
  // list of sm of blog separated by ","
  tags       String?
  orderNum   Int?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  blog       Blog         @relation(fields: [blogId], references: [id])
  blogId     Int
  Permission Permission[]
  Post       Post[]
  Task       Task[]
}

model Post {
  id            Int         @id @default(autoincrement())
  name          String?
  descr         String?
  // time of publication in UTC
  pubDateTime   DateTime?
  // data of post in JSON
  payload       String?
  // data of publicated post, depends on certain social media
  // JSON data. It is set only after publication has happened
  pubData       String?
  // the final selected author
  author        String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  socialMedia   SocialMedia @relation(fields: [socialMediaId], references: [id])
  socialMediaId Int
  Task          Task[]
  ChangeLog     ChangeLog[]
}

model Task {
  id            Int          @id @default(autoincrement())
  name          String?
  descr         String?
  type          String
  // time of execution in UTC
  execDateTime  DateTime
  // json
  payload       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  post          Post?        @relation(fields: [postId], references: [id])
  postId        Int?
  // you need to specify blogId or socialMediaId
  // if specified means task for whole blog
  blog          Blog?        @relation(fields: [blogId], references: [id])
  blogId        Int?
  // if specified means task only for specified social media
  socialMedia   SocialMedia? @relation(fields: [socialMediaId], references: [id])
  socialMediaId Int?
  ChangeLog     ChangeLog[]
}

model ChangeLog {
  id             Int      @id @default(autoincrement())
  msg            String?
  type           String
  // event time in utc
  dateTime       DateTime
  // json
  payload        String?
  createdAt      DateTime @default(now())
  actionByUser   User?    @relation(fields: [actionByUserId], references: [id])
  actionByUserId Int?
  post           Post?    @relation(fields: [postId], references: [id])
  postId         Int?
  task           Task?    @relation(fields: [taskId], references: [id])
  taskId         Int?
}
